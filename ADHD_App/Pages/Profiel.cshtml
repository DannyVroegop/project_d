@page
@model ADHD_App.Pages.Profiel
@{
    ViewData["Title"] = "Profiel";
}

<style>
    .intro {
        background-color: #ffff;
        color: black;
        padding: 20px;
        width: 500px;
        margin: 0 auto;
        text-indent: 100px;
        border-radius: 25px;
        margin-top: 100px;
    }

    .background {
        background-color: #ffff;
        padding: 300px;
        width: 900px;
        margin: 0 auto;
        border-radius: 25px;
        margin-top: 25px;
    }
    .backbutton {
        background-color: #ffff;
        padding: 5px, 4px;
        width: 75px;
        margin: 0 auto;
        margin-left: -15px;
        border-radius: 25px;
        text-align: center;
    }

    .ProfielFoto {
        position: relative;
        top: 220px;
        height: 200px; 
        width: 100px; 
        margin-left: -250px; 
        margin-top: -500px;
    }

    .ProfielFoto:active{
        transform: translateY(4px);
    }

    .ProfielFotoGRID {
        height: 300px;
        width: 400px;
        position: absolute;
        top: 85%;
        left: 30%;
        /right: 700px;
        margin-left: -250px;
        margin-top: -500px;
        background-color: #FFFFFF;
        display: none;
        border-style: solid;
        border-color: #000000;
        overflow-y: scroll;
        grid-template-columns: repeat(2, 1fr);
        gap: 5px;
        z-index: 10;
    }

    .GRIDBLOCK {
        height: 300px;
        width: 400px;
        position: relative;
        /*top: 700px;
        right: 100px;*/
        margin-left: -250px;
        margin-top: -500px;
        background-color: #FFFFFF;
        display: block;
        border-style: solid;
        border-color: #000000;
    }

    .info-container{
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: flex-start;
        background-color: #FFFFFF;
        padding: 0px;
        width: 90%;
        gap: 3px;
        margin: 10% auto 0;
    }

    .info {
        background-color: #7FE4E3;
        border-radius: 25px;
        margin-bottom: 10px;
        padding: 10px;
        width: 100%;
        white-space: nowrap;
        box-sizing: border-box;
        flex-basis: 50%;
    }
    .intro p {
        margin: 0;
    }
    

</style>
@{
    var person = Model.People;
}

<partial name="Taskbar" />

<div class="intro">
    <h2><b>Profiel van @person.Username!</b></h2>
</div>

<div class="background">
    <div class="ProfielFoto" id="ProfielFoto">
        <img src="@person.ProfilePicture" alt="Huidige profiel foto van de gebruiker"/>
    </div>
    <div class="ProfielFotoGRID" id="PROFIELGRID">
    </div>
    <div class="info-container">
        <div class="info">
            <p><b>Voornaam: @person.First_Name</b></p>
        </div>
        <div class="info">
            <p><b>Achternaam: @person.Last_Name</b></p>
        </div>
        <div class="info">
            <p><b>Leeftijd: <span id="age"></span></b></p>
        </div>
        <div class="info">
            <p><b>Geboortedatum: <span id="birthdate">@person.Date_of_Birth.ToLongDateString()</span></b></p>
        </div>
        <div class="info">
            <p><b>Geslacht: @person.Gender</b></p>
        </div>
        <div class="info">
            <p><b>Email: @person.Email</b></p>
        </div>
    </div>
</div>


<script>
    const button = document.getElementById("ProfielFoto")
    button.addEventListener("click", function () {
        profielgrid = document.getElementById("PROFIELGRID")
        if (profielgrid.style.display != 'none') {
            profielgrid.style.display = 'none'
        }
        else { 
            profielgrid.style.display = 'grid'
        }
    })
</script>

<script>
    window.onload = function loadage() {
        // Get the birthdate from the HTML
        const birthdateElement = document.getElementById("birthdate");
        const birthdateStr = birthdateElement.textContent.trim();

        // Parse the birthdate string to a Date object
        const birthdate = new Date(birthdateStr);

        // Function to calculate age
        function calculateAge(birthdate) {
            const today = new Date();
            let age = today.getFullYear() - birthdate.getFullYear();
            const monthDifference = today.getMonth() - birthdate.getMonth();
            if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthdate.getDate())) {
                age--;
            }
            return age;
        }

        // Calculate age
        const age = calculateAge(birthdate);

        // Update the age element with the calculated age
        const ageElement = document.getElementById("age");
        ageElement.innerHTML = `<b>${age}</b>`;
        // Load images
        var test = @Html.Raw(Json.Serialize(Model.People.unlockedImages))
            for (const pic of test) {
            let item = document.createElement("GRIDBLOCK");
            var parent = document.getElementById("PROFIELGRID");
            parent.appendChild(item);
            var newimg = document.createElement("img")
            newimg.src = pic;
            newimg.alt = "Een potentieel profielfoto"
            item.appendChild(newimg)
            item.addEventListener("click", function () {
                profielgrid = document.getElementById("PROFIELGRID")
                profielgrid.style.display = 'none';
                console.log(item.children[0]);
                console.log("OTHER_TEST");
                console.log(document.getElementById("ProfielFoto").children[0].src)
                var profielfoto = document.getElementById("ProfielFoto").children[0];
                profielfoto.src = item.children[0].src;
            })
        }
    };
</script>

